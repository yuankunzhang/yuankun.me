<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yuankun&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuankun.me/"/>
  <updated>2017-08-13T08:26:16.000Z</updated>
  <id>https://yuankun.me/</id>
  
  <author>
    <name>Yuankun Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>认识时序数据库</title>
    <link href="https://yuankun.me/2017/08/11/introduction-to-tsdb/"/>
    <id>https://yuankun.me/2017/08/11/introduction-to-tsdb/</id>
    <published>2017-08-11T08:54:54.000Z</published>
    <updated>2017-08-13T08:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>在很多场景下，数据并不是孤立的存在。例如股票价格的走势，一天之内温度的变化等。一组相关数据以时间为坐标串联起来，形成一条连续的变化线，这就是时序数据。时序数据可以直观地反映变化的规律性，也可以方便地用来识别和预测异常情形。</p>
<p>而时序数据库，就是专门用来存储时序数据的一类特殊数据库。</p>
<p>相比于传统的 RDBMS 或者 NoSQL，时序数据库有下列鲜明的特征。</p>
<a id="more"></a>
<p><strong>时序数据没有复杂的结构和关联</strong>。时序数据关注的是被测指标在时间维度上的变化规律，它并不需要复杂的嵌套的数据结构：时间戳连同数据值就构成了一个数据点。另外，时序数据也不关心不同的被测指标之间的关系（这种关系在定义良好的可视化图表上一目了然），数据之间不需要任何诸如外键等关联关系。</p>
<p><strong>正是因为没有复杂的结构和关联，时序数据库不需要提供范式和事务支持</strong>。时序数据库面向的是与传统数据库截然不同的业务领域，范式和事务在其中是不必要的。不过，时序数据库存在其他的限制和约束。</p>
<p><strong>时序数据库的实时写入量通常很大</strong>。时序数据需要采集的数据量与数据源的数量以及采样的时间精度成正比。在某些业务场景下，一秒钟需要采集上万甚至更多个数据点。</p>
<p><img src="https://i.imgur.com/xBEstlX.png" alt="北京市一天之内的温度走势，图片截取自 www.weather.com.cn"></p>
<p>上图是一组时序数据的示例：北京市一天之内的温度走势，图片截取自 www.weather.com.cn。</p>
<h2 id="时序数据的结构"><a href="#时序数据的结构" class="headerlink" title="时序数据的结构"></a>时序数据的结构</h2><p>时序数据有着简单的结构。</p>
<p>被测量的指标一般称作 <code>metric</code>。指标的一个孤立数据点表示为以指标名为索引的键值对：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">metric -&gt; (timestamp, value)</div></pre></td></tr></table></figure>
<p>依时间顺序逐次采集若干数据点，我们就得到了该被测量指标的一系列值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">metric -&gt; (t0, v0), (t1, v1), (t2, v2), ...</div></pre></td></tr></table></figure>
<p>这就是时序数据的基本结构，一般来说采样的时间间隔是恒定的（允许存在误差）。作为示例，下面是一组温度的时序数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">temperature -&gt; (1502433662000, 29.3), (1502433672002, 29.7), (1502433681999, 29.6), ...</div></pre></td></tr></table></figure>
<p>仅仅依靠指标名称来索引数据略嫌简陋，有时候希望能对数据作出进一步的区分。为了达到这一目的，我们给指标添加一个或者多个标签（labels）。例如，为了区分不同城市的温度，我们引入一个叫做 <code>city</code> 的标签。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">temperature&#123;city=beijing&#125; -&gt; ...</div><div class="line">temperature&#123;city=nanjing&#125; -&gt; ...</div><div class="line">temperature&#123;city=tianjin&#125; -&gt; ...</div></pre></td></tr></table></figure>
<p>指标的名称可以看作是一个叫作 <code>name</code> 的特殊标签，这样，数据的索引就一般化为了一组标签的集合。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;name=temperature, city=beijing&#125; -&gt; ...</div><div class="line">&#123;name=temperature, city=nanjing&#125; -&gt; ...</div><div class="line">&#123;name=temperature, city=tianjin&#125; -&gt; ...</div></pre></td></tr></table></figure>
<h2 id="时序数据库的读写特点"><a href="#时序数据库的读写特点" class="headerlink" title="时序数据库的读写特点"></a>时序数据库的读写特点</h2><p>写入操作的特点：</p>
<ul>
<li>由于数据量庞大，存储时需要引入某种压缩方案。Facebook 在<a href="http://www.vldb.org/pvldb/vol8/p1816-teller.pdf" target="_blank" rel="external">其阐述 Gorilla 数据库的论文</a>中介绍了一种非常适合时序数据库的压缩方案。</li>
<li>同样由于数据量庞大，存储时应当使用适当的留存策略（Retention Policy），定期删除数据。一般采用三级存储方案：最上层的内存用做缓存，存储热点数据；下一层的 SSD 用来存储留存期（一般为数周或数月）之内的数据；此外还有一个数据中心用来保留全部数据。</li>
<li>写入操作远多于读取操作，可能占到 99% 以上。绝大部分数据不会被用到。</li>
<li>数据总是追加式地写入（顺序写入）。</li>
<li>数据写入之后，就不会再被更新（无随机更新）。</li>
<li>超出留存期的数据被整块删除（无随机删除）。</li>
</ul>
<p>读取操作的特点：</p>
<ul>
<li>时序数据存在显著的时间敏感性，越是近期的数据越重要。大部分读取操作所请求的数据集中在最近一天或几天。</li>
<li>对时序数据的分析过程中需要进行大量运算（求和、计算变化率等），时序数据库需要高效地支持这些运算。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>你可以从以下两篇文章中找到更多关于时序数据库的讨论：</p>
<ul>
<li><a href="http://jmoiron.net/blog/thoughts-on-timeseries-databases/" target="_blank" rel="external">Thoughts on Time-series Databases</a></li>
<li><a href="https://www.xaprb.com/blog/2014/06/08/time-series-database-requirements/" target="_blank" rel="external">Time-Series Database Requirements</a></li>
</ul>
<p>另外，市面上已经有了很多时序数据库，下面两个列表提供了相关方面的内容：</p>
<ul>
<li><a href="https://db-engines.com/en/ranking/time+series+dbms" target="_blank" rel="external">DB-Engines Ranking of Time Series DBMS</a></li>
<li><a href="The complete list of all time series databases for your IoT project">The complete list of all time series databases for your IoT project</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在很多场景下，数据并不是孤立的存在。例如股票价格的走势，一天之内温度的变化等。一组相关数据以时间为坐标串联起来，形成一条连续的变化线，这就是时序数据。时序数据可以直观地反映变化的规律性，也可以方便地用来识别和预测异常情形。&lt;/p&gt;
&lt;p&gt;而时序数据库，就是专门用来存储时序数据的一类特殊数据库。&lt;/p&gt;
&lt;p&gt;相比于传统的 RDBMS 或者 NoSQL，时序数据库有下列鲜明的特征。&lt;/p&gt;
    
    </summary>
    
    
      <category term="tsdb" scheme="https://yuankun.me/tags/tsdb/"/>
    
  </entry>
  
  <entry>
    <title>使用 Let&#39;s Encrypt 为网站启用 HTTPS 支持</title>
    <link href="https://yuankun.me/2017/08/06/enable-https-with-lets-encrypt/"/>
    <id>https://yuankun.me/2017/08/06/enable-https-with-lets-encrypt/</id>
    <published>2017-08-06T08:58:13.000Z</published>
    <updated>2017-08-13T08:31:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP 协议传输的数据都是不加密的。想象一下，你访问某个网站，当数据经过路由器、宽带网关，以及某墙的时候都是完全可见的，是不是有种裸奔的感觉？为网站启用 HTTPS 支持可以说是大势所趋，在某国日益倒车的互联网环境下更是如此。</p>
<p>第零步是选择一个靠谱的 CA（Certificate Authority，数字证书认证中心）。你以为所有的认证中心都是中立可信的吗？并不是的，比如此前频频爆出丑闻的 WoSign 和 StarCom，这两家认证中心<a href="https://security.googleblog.com/2016/10/distrusting-wosign-and-startcom.html" target="_blank" rel="external">已经被 Google Chrome 等多款浏览器默认设置为不信任</a>。当然你更不能自己做裁判，像 12306.cn 一样给自己颁发证书。这里推荐 <a href="https://letsencrypt.org/" target="_blank" rel="external">Let’s Encrypt</a>，这家成立于 2016 年、由互联网安全研究小组（ISRG）主导的机构致力于向用户提供<strong>免费的、自动化管理</strong>的证书方案。</p>
<a id="more"></a>
<p>Let’s Encrypt 允许使用实现了 <a href="https://ietf-wg-acme.github.io/acme/" target="_blank" rel="external">ACME 协议</a>的客户端完成诸如证书获取、认证、签名、安装以及续签等步骤。官方推荐使用 <a href="https://certbot.eff.org/" target="_blank" rel="external">Certbot</a>。下面，我们以 Ubuntu 16.04 &amp; Nginx 为例，说明如何使用 Certbot 快速地为网站启用 HTTPS 支持。</p>
<h2 id="第一步：安装-Certbot"><a href="#第一步：安装-Certbot" class="headerlink" title="第一步：安装 Certbot"></a>第一步：安装 Certbot</h2><p>在系统中添加 Certbot 的 PPA，然后使用 <code>apt</code> 安装 Certbot。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo apt-get update</div><div class="line"><span class="meta">$</span> sudo apt-get install software-properties-common</div><div class="line"><span class="meta">$</span> sudo add-apt-repository ppa:certbot/certbot</div><div class="line"><span class="meta">$</span> sudo apt-get update</div><div class="line"><span class="meta">$</span> sudo apt-get install python-certbot-nginx</div></pre></td></tr></table></figure>
<h2 id="第二步：安装证书"><a href="#第二步：安装证书" class="headerlink" title="第二步：安装证书"></a>第二步：安装证书</h2><p>运行下面的命令获取证书，这个命令同时会为你更改 Nginx 配置文件（并且重载 Nginx）：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo certbot --nginx</div></pre></td></tr></table></figure>
<p>如果你想自己修改 Nginx 配置文件，可以使用 <code>certonly</code> 选项：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo certbot --nginx certonly</div></pre></td></tr></table></figure>
<h2 id="第三步：自动续签"><a href="#第三步：自动续签" class="headerlink" title="第三步：自动续签"></a>第三步：自动续签</h2><p>Let’s Encrypt 签发的证书，有效期是 90 天。你可以使用下面的命令对证书进行续签：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo certbot renew --dry-run</div></pre></td></tr></table></figure>
<p>当然，创建一个 Cron Job 周期性地自动续签是一个更省事的方案。</p>
<hr>
<p>现在，在浏览器中打开你的网站，你就能从地址栏看到令人安心的绿色小锁了。除了本文介绍的方法，<a href="https://github.com/Neilpang/acme.sh" target="_blank" rel="external">acme.sh</a> 这个项目也提供了一种非常易用的方案。想要了解更多，请参考<a href="https://syntaxoff.com/post/201708/domain_ssl/" target="_blank" rel="external">这篇文章</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP 协议传输的数据都是不加密的。想象一下，你访问某个网站，当数据经过路由器、宽带网关，以及某墙的时候都是完全可见的，是不是有种裸奔的感觉？为网站启用 HTTPS 支持可以说是大势所趋，在某国日益倒车的互联网环境下更是如此。&lt;/p&gt;
&lt;p&gt;第零步是选择一个靠谱的 CA（Certificate Authority，数字证书认证中心）。你以为所有的认证中心都是中立可信的吗？并不是的，比如此前频频爆出丑闻的 WoSign 和 StarCom，这两家认证中心&lt;a href=&quot;https://security.googleblog.com/2016/10/distrusting-wosign-and-startcom.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;已经被 Google Chrome 等多款浏览器默认设置为不信任&lt;/a&gt;。当然你更不能自己做裁判，像 12306.cn 一样给自己颁发证书。这里推荐 &lt;a href=&quot;https://letsencrypt.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Let’s Encrypt&lt;/a&gt;，这家成立于 2016 年、由互联网安全研究小组（ISRG）主导的机构致力于向用户提供&lt;strong&gt;免费的、自动化管理&lt;/strong&gt;的证书方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ssl" scheme="https://yuankun.me/tags/ssl/"/>
    
      <category term="security" scheme="https://yuankun.me/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>为 Prometheus 添加 HTTP Basic Auth</title>
    <link href="https://yuankun.me/2017/07/30/add-http-basic-auth-to-prometheus/"/>
    <id>https://yuankun.me/2017/07/30/add-http-basic-auth-to-prometheus/</id>
    <published>2017-07-30T15:03:44.000Z</published>
    <updated>2017-08-13T08:42:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Prometheus 的 <a href="https://github.com/prometheus/node_exporter" target="_blank" rel="external">Node Exporter</a> 并没有提供任何认证支持。不过，借助 Nginx 作为反向代理服务器，我们可以很容易地为 Node Exporter 添加 HTTP Basic Auth 功能。</p>
<p>首先，启动 Node Exporter，监听 9090 端口。</p>
<p>然后，在 <code>/etc/nginx</code> （可能你的 Nginx 配置目录在其他路径，请做相应修改）目录下，使用 <code>apache2-utils</code> 提供的 <code>htpasswd</code> 工具创建一个用户文件，需要填入用户名和密码：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> htpasswd -c .htpasswd yuankun</div><div class="line">New password: </div><div class="line">Re-type new password: </div><div class="line">Adding password for user yuankun</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>接下来，在 Nginx 配置文件中添加下面的配置，这里我们使用 19090 作为代理端口：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="section">http</span> &#123;</div><div class="line">  <span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">0.0.0.0:19090</span>;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">      <span class="attribute">proxy_pass</span> http://localhost:9090/;</div><div class="line"></div><div class="line">      <span class="attribute">auth_basic</span> <span class="string">"Prometheus"</span>;</div><div class="line">      <span class="attribute">auth_basic_user_file</span> <span class="string">".htpasswd"</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>保存配置文件，然后重新载入 Nginx 服务。此时在浏览器中访问 server:19090，浏览器会要求你输入用户名和密码。</p>
<p>最后一步是修改 <code>prometheus.yml</code> 文件，将我们的 Node Exporter 服务添加进去：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- job_name:</span> <span class="string">'node-exporter'</span></div><div class="line"><span class="attr">  static_configs:</span></div><div class="line"><span class="attr">    - targets:</span> <span class="string">['your-ip:19090']</span></div><div class="line"><span class="attr">  basic_auth:</span></div><div class="line"><span class="attr">    username:</span> <span class="string">yuankun</span></div><div class="line"><span class="attr">    password:</span> <span class="string">your-password</span></div></pre></td></tr></table></figure>
<p>重启 Prometheus 服务，就大功告成了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Prometheus 的 &lt;a href=&quot;https://github.com/prometheus/node_exporter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node Exporter&lt;/a&gt; 并没有提供任何认证支持。不过，借助 Nginx 作为反向代理服务器，我们可以很容易地为 Node Exporter 添加 HTTP Basic Auth 功能。&lt;/p&gt;
&lt;p&gt;首先，启动 Node Exporter，监听 9090 端口。&lt;/p&gt;
&lt;p&gt;然后，在 &lt;code&gt;/etc/nginx&lt;/code&gt; （可能你的 Nginx 配置目录在其他路径，请做相应修改）目录下，使用 &lt;code&gt;apache2-utils&lt;/code&gt; 提供的 &lt;code&gt;htpasswd&lt;/code&gt; 工具创建一个用户文件，需要填入用户名和密码：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; htpasswd -c .htpasswd yuankun&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;New password: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Re-type new password: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Adding password for user yuankun&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="prometheus" scheme="https://yuankun.me/tags/prometheus/"/>
    
  </entry>
  
  <entry>
    <title>规划 Prometheus 的存储用量</title>
    <link href="https://yuankun.me/2017/05/03/plan-storage-space-for-prometheus/"/>
    <id>https://yuankun.me/2017/05/03/plan-storage-space-for-prometheus/</id>
    <published>2017-05-03T14:32:30.000Z</published>
    <updated>2017-08-13T09:14:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-引言"><a href="#一-引言" class="headerlink" title="一. 引言"></a>一. 引言</h2><p><a href="https://prometheus.io/" target="_blank" rel="external">Prometheus</a> 是一款开源的监控与报警系统，支持对海量监控数据的抓取与查询。在部署 Prometheus 服务之前，对服务的存储用量进行规划是十分重要的。否则，运维人员无法对业务数据的规模和所需存储资源的量级获得直观认识。分配的存储资源过多，会导致资源闲置与成本浪费；分配的存储容量不足，则无法应对业务的增长，严重影响监控服务的稳定性。</p>
<p>部署 Prometheus 服务的第一个步骤是，整理与获得需要监控的节点集合。通过这一集合，我们可以计算出业务数据的规模。进而，我们可以计算出，需要多少存储资源来支撑监控服务的运行。</p>
<p>本文对影响 Prometheus 服务的运行时存储用量的各个因素进行了剖析与讨论，并给出若干经验公式。这些公式可以用于预估监控服务的内存和硬盘用量。</p>
<a id="more"></a>
<h2 id="二-计算样本总量"><a href="#二-计算样本总量" class="headerlink" title="二. 计算样本总量"></a>二. 计算样本总量</h2><p>首先明确两个名词，监控节点与测量点。</p>
<ul>
<li><strong>监控节点</strong>。一个 <a href="https://prometheus.io/docs/instrumenting/exporters/" target="_blank" rel="external">exporter</a> 进程被认为是一个监控节点。一台主机上可能运行多个不同类型的 exporter，因此，这台主机上存在多个监控节点。</li>
<li><strong>测量点</strong>。一个测量点代表了某监控节点上的一个观测对象。从某测量点采集到的一组样本数据构成一条时间序列（time series）。</li>
</ul>
<p>为了预估存储用量，首先需要计算样本数据的总量。我们约定：</p>
<ul>
<li>需要监控的节点集合为 $nodes={i|i&gt;0}$</li>
<li>节点 $i$ 上的测量点的数目为 $metrics(i)$ </li>
<li>对节点 $i$ 的抓取时间间隔为 $interval(i)$，一般为所有节点设置相同的抓取间隔</li>
</ul>
<p>每个节点上的测量点的数目由所使用的具体的 exporter 定义。特别的：</p>
<ul>
<li><a href="https://github.com/prometheus/node_exporter" target="_blank" rel="external">Node Exporter</a> 大约有 250 个测量点</li>
<li>Prometheus 服务本身大约有 770 个测量点</li>
</ul>
<p>抓取间隔越大，数据越稀疏；抓取间隔越小，监控数据的时间分辨率越高，但所需的存储资源会增多。<strong>建议将该值设置在 5s ~ 15s 之间</strong>。</p>
<p>基于上述约定可得，在特定的时间范围 $duration$ 内，Prometheus 从节点集合中所抓取的样本数据的总量依下式计算：</p>
<p>$$sample\_count(duration)=\sum_{i \in nodes}{(metrics(i) \times \frac{duration}{interval(i)})}$$</p>
<p>Prometheus 支持三种不同的数据编码方案。第一种方案是 delta 编码，已被弃用；第二种方案是 double-delta 编码，这也是默认使用的编码方案；第三种方案是 varbit 编码，基于 Facebook 的<a href="http://www.vldb.org/pvldb/vol8/p1816-teller.pdf" target="_blank" rel="external">一篇关于时序数据库的论文</a>。varbit 编码方案虽能提高数据压缩率，却显著增大了编解码的运算时间。除非有特殊场景，否则我们使用 double-delta 编码方案。</p>
<p>由 Prometheus 的<a href="https://prometheus.io/docs/operating/storage/#chunk-encoding" target="_blank" rel="external">官方文档</a>，使用 double-delta 方案对数据进行编码后，每条样本的字节大小为：</p>
<p>$$sample\_size=3.3B$$</p>
<p>经过若干次采样测量，观测到的平均样本大小介于 3.0~3.8B 之间。可以认为 3.3B 的单条样本大小是可信的。</p>
<h2 id="三-规划内存用量"><a href="#三-规划内存用量" class="headerlink" title="三. 规划内存用量"></a>三. 规划内存用量</h2><p>Prometheus 对内存的使用由以下四个部分组成：</p>
<ol>
<li>留存于内存的活跃样本</li>
<li>排队等待持久化的过期样本</li>
<li>索引数据</li>
<li>其他运行时内存消耗</li>
</ol>
<p>第 3.1 节讨论样本数据的内存用量（前两部分），第 3.2 节讨论索引数据的内存用量。对于其他的运行时内存消耗，本文不予讨论。</p>
<h3 id="3-1-为样本数据计算内存用量"><a href="#3-1-为样本数据计算内存用量" class="headerlink" title="3.1 为样本数据计算内存用量"></a>3.1 为样本数据计算内存用量</h3><p><strong>3.1.1 留存于内存的活跃样本</strong></p>
<p>对于活跃样本，假设我们要求的留存时间为 $mem\_retention$，则所需的内存空间为：</p>
<p>$$sample\_mem\_1=sample\_size \times sample\_count(mem\_retention)$$</p>
<p>在内存中的留存数据越多，查询过往数据的性能越高。但是，新数据的价值远远高于过往数据。在实际应用中，需要根据所监控的业务的性质，设定合理的内存留存时间。Facebook 在<a href="http://www.vldb.org/pvldb/vol8/p1816-teller.pdf" target="_blank" rel="external">其论文</a>中给出的经验值是 26h。<strong>建议将该值设置在 6h ~ 48h 之间</strong>。</p>
<p><strong>3.1.2 排队等待持久化的过期样本</strong></p>
<p>对于排队样本，我们约定：</p>
<ul>
<li>为了完成对当前所有排队样本的持久化，Prometheus 需要花费的时间周期为 $persist\_cycle$</li>
<li>为了不至于使 Prometheus 进入紧急模式（Rush mode），排队样本所占的空间不应超过预估空间的 $80\%$</li>
</ul>
<p>一般情况下，持久化的时间周期为 6 个小时：</p>
<p>$$persist\_cycle=6h$$</p>
<p>因此，排队样本所需的内存空间为：</p>
<p>$$sample\_mem\_2=\frac{sample\_size \times sample\_count(persist\_cycle)}{0.8}$$</p>
<p><strong>3.1.3 汇总</strong></p>
<p>基于前两个公式，再加上索引数据的内存用量（参见第 3.2 节），总内存用量可以依下式计算：</p>
<p>$$mem=sample\_mem\_1+sample\_mem\_2+index\_mem$$</p>
<p>一条<a href="https://prometheus.io/docs/operating/storage/#memory-usage" target="_blank" rel="external">经验法则</a>为，<strong>总内存用量不应超过物理内存大小的三分之二</strong>。</p>
<p>下表计算了若干典型的内存用量（假设所有节点均为 Node Exporter 节点）：</p>
<table>
<thead>
<tr>
<th><strong>节点数目</strong></th>
<th><strong>内存留存</strong></th>
<th><strong>抓取间隔</strong></th>
<th><strong>活跃样本量</strong></th>
<th><strong>排队样本量</strong></th>
<th><strong>内存用量</strong></th>
<th><strong>物理内存</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>100</td>
<td>6h</td>
<td>1s</td>
<td>1.789G</td>
<td>2.237G</td>
<td>4.026G</td>
<td>6G</td>
</tr>
<tr>
<td>100</td>
<td>6h</td>
<td>5s</td>
<td>0.358G</td>
<td>0.447G</td>
<td>0.805G</td>
<td>1.5G</td>
</tr>
<tr>
<td>1000</td>
<td>6h</td>
<td>5s</td>
<td>3.58G</td>
<td>0.447G</td>
<td>4.027G</td>
<td>6G</td>
</tr>
<tr>
<td>100</td>
<td>24h</td>
<td>1s</td>
<td>7.156G</td>
<td>2.237G</td>
<td>9.393G</td>
<td>14G</td>
</tr>
<tr>
<td>100</td>
<td>24h</td>
<td>5s</td>
<td>1.432G</td>
<td>0.447G</td>
<td>1.879G</td>
<td>3G</td>
</tr>
<tr>
<td>1000</td>
<td>24h</td>
<td>5s</td>
<td>14.32G</td>
<td>0.447G</td>
<td>14.75G</td>
<td>22G</td>
</tr>
</tbody>
</table>
<h3 id="3-2-为索引数据计算内存用量"><a href="#3-2-为索引数据计算内存用量" class="headerlink" title="3.2 为索引数据计算内存用量"></a>3.2 为索引数据计算内存用量</h3><p>对索引数据所需内存的估计，可以使用下面的经验公式：</p>
<p>$$index\_mem=\frac{series\_count}{1000}MB$$</p>
<p>其中，</p>
<p>$$series\_count=\sum_{i \in nodes}{metrics(i)}$$</p>
<p>也就是，如果有 1000 个时间序列，大约需要 1M 内存。为了提高对旧数据查询性能，可以适当增大索引内存。</p>
<h2 id="四-规划硬盘用量"><a href="#四-规划硬盘用量" class="headerlink" title="四. 规划硬盘用量"></a>四. 规划硬盘用量</h2><h3 id="4-1-为样本数据计算硬盘用量"><a href="#4-1-为样本数据计算硬盘用量" class="headerlink" title="4.1 为样本数据计算硬盘用量"></a>4.1 为样本数据计算硬盘用量</h3><p>Prometheus 将样本数据持久化为若干文件。当文件中的过期数据超过一定比率时，Prometheus 会对文件执行收缩操作。这个比率被称为文件的收缩比，默认值为 $10\%$。留存时间设置的越大，文件的收缩比应该相应地上调。</p>
<p>假设我们要求样本留存时间为 $disk\_retension$，文件的收缩比为 $shrink\_ratio$，则样本的硬盘用量为：</p>
<p>$$sample\_disk=\frac{sample\_size \times sample\_count(disk\_retention)}{1+shrink\_ratio}$$</p>
<p>加上存储检查点所需的硬盘空间（参加第 4.2 节），总硬盘用量为：</p>
<p>$$disk=sample\_disk+checkpoint\_disk$$</p>
<p>下表计算了若干典型的硬盘用量（假设所有节点均为 Node Exporter 节点），注意，该表未包含存储 checkpoint 所需要的硬盘空间：</p>
<table>
<thead>
<tr>
<th><strong>节点数目</strong></th>
<th><strong>留存时间</strong></th>
<th><strong>抓取间隔</strong></th>
<th><strong>硬盘用量</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>100</td>
<td>14d</td>
<td>1s</td>
<td>91G</td>
</tr>
<tr>
<td>100</td>
<td>14d</td>
<td>5s</td>
<td>18G</td>
</tr>
<tr>
<td>1000</td>
<td>14d</td>
<td>1s</td>
<td>910G</td>
</tr>
<tr>
<td>1000</td>
<td>14d</td>
<td>5s</td>
<td>180G</td>
</tr>
</tbody>
</table>
<h3 id="4-2-为检查点（Checkpoint）计算硬盘用量"><a href="#4-2-为检查点（Checkpoint）计算硬盘用量" class="headerlink" title="4.2 为检查点（Checkpoint）计算硬盘用量"></a>4.2 为检查点（Checkpoint）计算硬盘用量</h3><p>检查点操作用于将内存中的活跃样本暂存到某硬盘文件中，以减少由于程序崩溃或机器掉电等引起的数据丢失。其硬盘用量与活跃样本的内存用量持平即可：</p>
<p>$$checkpoint\_disk=sample\_mem\_1$$</p>
<h2 id="五-总结"><a href="#五-总结" class="headerlink" title="五. 总结"></a>五. 总结</h2><p>本文中，我们首先讨论了如何计算所观测的样本总量。特别的，Node Exporter 大约有 250 个测量点，Prometheus 服务本身大约有 770 个测量点。</p>
<p>进行内存用量规划时，我们主要关注留存于内存中的活跃样本与位于持久化队列中的过期样本。索引数据所需的内存较少，一个经验公式为，每一千个时间序列大约需要 1M 内存。</p>
<p>Prometheus 对硬盘的使用主要集中在对样本数据的持久化上。当文件过大时，Prometheus 会对文件执行收缩操作。收缩操作的触发由文件的收缩比控制，该选项的默认值为 $10\%$。</p>
<p>请注意，数据对内存和硬盘的使用情况由众多因素共同影响，例如，数据本身的性质，内存性能，硬盘性能，垃圾回收机制，内存碎片等。对存储用量作出准确的预估是困难的。本文给出的公式在评估数据量级时有参考意义，对于实际的调优工作，还需要对线上环境进行深入而详尽的观察和测量之后方可完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-引言&quot;&gt;&lt;a href=&quot;#一-引言&quot; class=&quot;headerlink&quot; title=&quot;一. 引言&quot;&gt;&lt;/a&gt;一. 引言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://prometheus.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Prometheus&lt;/a&gt; 是一款开源的监控与报警系统，支持对海量监控数据的抓取与查询。在部署 Prometheus 服务之前，对服务的存储用量进行规划是十分重要的。否则，运维人员无法对业务数据的规模和所需存储资源的量级获得直观认识。分配的存储资源过多，会导致资源闲置与成本浪费；分配的存储容量不足，则无法应对业务的增长，严重影响监控服务的稳定性。&lt;/p&gt;
&lt;p&gt;部署 Prometheus 服务的第一个步骤是，整理与获得需要监控的节点集合。通过这一集合，我们可以计算出业务数据的规模。进而，我们可以计算出，需要多少存储资源来支撑监控服务的运行。&lt;/p&gt;
&lt;p&gt;本文对影响 Prometheus 服务的运行时存储用量的各个因素进行了剖析与讨论，并给出若干经验公式。这些公式可以用于预估监控服务的内存和硬盘用量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="prometheus" scheme="https://yuankun.me/tags/prometheus/"/>
    
  </entry>
  
  <entry>
    <title>隐藏在素数无穷的证明中的一个陷阱</title>
    <link href="https://yuankun.me/2017/02/03/trap-in-euclids-proof-of-primes/"/>
    <id>https://yuankun.me/2017/02/03/trap-in-euclids-proof-of-primes/</id>
    <published>2017-02-03T13:42:50.000Z</published>
    <updated>2017-08-13T09:25:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，关于素数有无穷多个的最普遍的证明方法是欧几里得的反证法：</p>
<blockquote>
<p>假设存在最大的素数 P，那么我们可以基于所有的素数构造一个新的数 $Q = 2 \times 3 \times 5 \times 7 \times … \times P + 1$。显然这个数不能被任一素数整除（所有素数除它都余1），这说明我们找到了一个更大的素数。</p>
</blockquote>
<p>我发现很多人误认为我们构造的这个新数 Q 是一个素数（甚至有些数学教材上也这么写），这其实是不对的。基于 Q 不能被任意素数整除这一事实，我们无法推断 Q 是否为素数，仅能够得到下面的结论：Q 或者是一个素数，或者包含一个比最大的素数 P 更大的素数因子。</p>
<p>通过简单的几行程序就能找到”存在 Q 为合数“的证据。这个数并不大。当 P 为 13 时，$Q = 2 \times 3 \times 5 \times 7 \times 11 \times 13 +1 = 30031 = 59 \times 509$。</p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道，关于素数有无穷多个的最普遍的证明方法是欧几里得的反证法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设存在最大的素数 P，那么我们可以基于所有的素数构造一个新的数 $Q = 2 \times 3 \times 5 \times 7 \times … \times P + 1$。显然这个数不能被任一素数整除（所有素数除它都余1），这说明我们找到了一个更大的素数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我发现很多人误认为我们构造的这个新数 Q 是一个素数（甚至有些数学教材上也这么写），这其实是不对的。基于 Q 不能被任意素数整除这一事实，我们无法推断 Q 是否为素数，仅能够得到下面的结论：Q 或者是一个素数，或者包含一个比最大的素数 P 更大的素数因子。&lt;/p&gt;
&lt;p&gt;通过简单的几行程序就能找到”存在 Q 为合数“的证据。这个数并不大。当 P 为 13 时，$Q = 2 \times 3 \times 5 \times 7 \times 11 \times 13 +1 = 30031 = 59 \times 509$。&lt;/p&gt;
    
    </summary>
    
    
      <category term="math" scheme="https://yuankun.me/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>我的遗愿清单</title>
    <link href="https://yuankun.me/2017/02/02/my-bucket-list/"/>
    <id>https://yuankun.me/2017/02/02/my-bucket-list/</id>
    <published>2017-02-02T15:24:22.000Z</published>
    <updated>2017-08-13T09:41:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>在这个春节我要为自己写一篇遗愿清单。</p>
<p>新年伊始就谈及死亡这么沉重的话题，似乎不合时宜。恰恰相反，我把这篇遗愿清单当作是送给我自己的新年礼物。每个人都会死，不过很少有年轻人认真地考虑过这个事情。他们自然地认为还有很长时间要活，因此经常会做一件极其愚蠢的事情：尽力打法时间。</p>
<p>假如你的一生仅仅剩下一个月，一周，或者一天，你会做些什么呢？只有接受了“终究会死”这一现实，你才会更加严肃地对待余下的生命，更加清晰地认识到对自己而言真正重要的事情是什么。</p>
<a id="more"></a>
<p><img src="https://i.imgur.com/7HGKHIL.png" alt="图片来自电影《遗愿清单》剧照"></p>
<p>OK，下面是我的遗愿清单，按我认为的重要性排序。</p>
<ol>
<li>时刻修炼自己的道德观，虽然自己所做的事情不一定能惠及人类，但坚决不能损害人类;</li>
<li>关心家人和朋友，多花时间陪伴他们；</li>
<li>成为一个优秀的丈夫和伟大的父亲；</li>
<li>永葆对知识的渴望，并终生学习；</li>
<li>努力保持健康；</li>
<li>拥有一个亲手装修的书房；</li>
<li>去一次南极；</li>
<li>见识三十个世界上的自然、人文和建造奇迹：雅典卫城、罗马斗兽场、亚马逊雨林等；</li>
<li>体验五项极限活动：跳伞，潜水，蹦极等；</li>
<li>参加十个世界上重要的节日和庆典；</li>
<li>观看十个世界水平的演出和比赛。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这个春节我要为自己写一篇遗愿清单。&lt;/p&gt;
&lt;p&gt;新年伊始就谈及死亡这么沉重的话题，似乎不合时宜。恰恰相反，我把这篇遗愿清单当作是送给我自己的新年礼物。每个人都会死，不过很少有年轻人认真地考虑过这个事情。他们自然地认为还有很长时间要活，因此经常会做一件极其愚蠢的事情：尽力打法时间。&lt;/p&gt;
&lt;p&gt;假如你的一生仅仅剩下一个月，一周，或者一天，你会做些什么呢？只有接受了“终究会死”这一现实，你才会更加严肃地对待余下的生命，更加清晰地认识到对自己而言真正重要的事情是什么。&lt;/p&gt;
    
    </summary>
    
    
      <category term="thoughts" scheme="https://yuankun.me/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>费恩曼学习法</title>
    <link href="https://yuankun.me/2016/08/22/the-feynman-technique/"/>
    <id>https://yuankun.me/2016/08/22/the-feynman-technique/</id>
    <published>2016-08-21T16:35:43.000Z</published>
    <updated>2017-08-13T09:45:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在学习知识的时候，不仅要做到知其然，更要做到知其所以然。有些时候，你觉得自己完全搞懂了某个问题，可是在向其他人讲解的时候，却结结巴巴讲不出来。这并不是表达能力的问题，而是你压根就没搞懂。著名的诺贝尔奖获得者理查德·费恩曼先生有一套自己的学习方法，这套方法施行起来极其简单，但效果却出奇地惊人（如果你能坚持使用的话）。下面就是费恩曼学习法的四个步骤。</p>
<a id="more"></a>
<p><strong>第一步，选择一个知识点</strong></p>
<p>准备好想要学习的知识点，思考一下有关这个知识点的内容。</p>
<p><strong>第二步，试着把它讲出来</strong></p>
<p>现在，关键的步骤来了，试着把它讲出来，用最简单最平实的语言。想象你的听者是一个门外汉，你能让他听懂你所讲述的内容吗？</p>
<p>千万不要原文背诵教科书上的内容，甚至，连教科书上那些晦涩生僻的术语都尽量别用。如果你只是简单地复述原文，那么你不过是自欺欺人罢了。不怕自己不懂，就怕不知道自己不懂。</p>
<p>这个步骤帮助你检查你是否真正理解了这个知识点，以及，如果并没有理解，那么还差在什么地方。</p>
<p><strong>第三步，查缺补漏</strong></p>
<p>现在你已经知道了你离真正理解这个知识点还差在什么地方。现在返回教学材料重新进行学习，有目的地查缺补漏。</p>
<p>然后重复第二步和第三步。</p>
<p><strong>第四步，回顾与简化</strong></p>
<p>到了这一步，你已经有足够的信心说你已经理解了。回顾一下你的讲解，如果仍然有某些词语不那么平实和直截了当，看看是否还有简化的余地。</p>
<p>这就是费恩曼学习法的全部内容。它的核心思想是：若能讲出来，才是真的懂。</p>
<p>另外，在编程领域有一种著名的调试方法叫做橡皮鸭调试法，它的理念和费恩曼学习法十分相似。感兴趣的同学请查看<a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging" target="_blank" rel="external">这里</a>。</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="https://www.farnamstreetblog.com/2012/04/learn-anything-faster-with-the-feynman-technique/" target="_blank" rel="external">The Best Way to Learn Anything: The Feynman Technique</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在学习知识的时候，不仅要做到知其然，更要做到知其所以然。有些时候，你觉得自己完全搞懂了某个问题，可是在向其他人讲解的时候，却结结巴巴讲不出来。这并不是表达能力的问题，而是你压根就没搞懂。著名的诺贝尔奖获得者理查德·费恩曼先生有一套自己的学习方法，这套方法施行起来极其简单，但效果却出奇地惊人（如果你能坚持使用的话）。下面就是费恩曼学习法的四个步骤。&lt;/p&gt;
    
    </summary>
    
    
      <category term="thoughts" scheme="https://yuankun.me/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>聆听大师们的声音 - 《编程大师访谈录》读后</title>
    <link href="https://yuankun.me/2016/02/29/reading-notes-on-programmers-at-work/"/>
    <id>https://yuankun.me/2016/02/29/reading-notes-on-programmers-at-work/</id>
    <published>2016-02-28T16:28:46.000Z</published>
    <updated>2017-08-13T09:53:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>可以说，执行特定任务就像是从大杂烩中选定菜目，排出一席美味佳肴。你可以左手一份美味右手一盘佳肴，但搁在一起可能味同狗粮。懂得巧妙搭配食材才称得上好厨师。同样，把程序各个部分妥善组合在一起，才是成就优秀计算机程序员之道。</p>
<p>– 《编程大师访谈录》</p>
</blockquote>
<p>这个周末，我花了两天时间读完了《编程大师访谈录》。书中收录了对19个传奇程序员的访谈内容，其中不乏大师们对编程的严肃思考和深刻洞见，读来趣味盎然。本文摘录了一组具有代表性的问答，从中可以对大师们对待编程的认识和想法管窥一斑。</p>
<p>请注意，大师们的见解与论断未必全盘正确，不加思考地把他们的观点拿来奉为圭臬是危险的。本书的迷人之处在于，大师们的那些充满冒险性与创造性的想法可以给我们带来深刻的启发。循着这些启发做一番自己的思考，或可得到一二真知。</p>
<p>另外，本书的成书时间是1986年。阅读时，需要把访谈置于当时的环境背景之下，方能透过时空和这些大师进行对话。</p>
<a id="more"></a>
<h2 id="对计算机与编程的看法"><a href="#对计算机与编程的看法" class="headerlink" title="对计算机与编程的看法"></a>对计算机与编程的看法</h2><p><strong>问：你认为计算机科学真的是科学吗？</strong></p>
<blockquote>
<p>查尔斯·西蒙尼：最简单的回答是，它是科学，就跟数学是科学一样。计算机程序可以视作数学对象。</p>
<p>约翰·沃诺克：不见得。比起科学，它更是工程学科。科学就是提出假说，做各种实验，在现实世界中创建模型。计算机却不是这样，它们是关于现实世界模型的自我实现的预言，是极好的信息工具。但是，说到计算机科学，我不知道它试图追求什么样的真理。</p>
<p>约翰·佩奇：我一直在说，计算机科学不是一门真正的科学，因为你没有实际发现有关物质世界的任何东西 – 但是，这只说对了一半。有时候一个问题的答案一下子豁然开朗了，就好像答案一直都在那里一样，而我发现了它。我仔细检查，发现答案是完美的。怪吧？</p>
</blockquote>
<p><strong>问：计算机或编程什么地方吸引你？</strong></p>
<p>受访者对这个问题的回答非常的一致，总结而言，他们都是被“编程”这项任务背后蕴含的创造性和美学特性所吸引。</p>
<blockquote>
<p>C·韦恩·莱特莱夫：我喜欢高科技的东西，我喜欢做出一些东西，让它们显示在屏幕上。如果你程序写得好，它可以非常优雅：它就像在歌唱，它制作精良。从工程的角度来看，我享受面对这一切，就像面对一辆漂亮的汽车，一座坚固的桥，或是一栋精美的建筑。它的一切都是那么平衡、那么和谐。</p>
<p>安迪·赫兹菲尔德：这是我能像到的唯一的工作，可以让我身兼工程师和艺术家两种角色。它包含难以置信的、严密的技术元素，这是我所喜欢的，为此你必须一丝不苟，思维缜密。另一方面，它有极具创造性的一面，唯一真正的限制就是你的想象力。这两种元素的联姻使得编程独一无二。你必须既当艺术家又当科学家，我喜欢这一点。我喜欢在编程工作的核心中创造魔法把戏。</p>
</blockquote>
<p><strong>问：你认为编程是艺术、科学、技能、手艺，还是……?</strong></p>
<blockquote>
<p>查尔斯·西蒙尼：什么是编程，人们对此一直各持己见。有人说它是科学，有人说它是艺术，还有人称之为技能或手艺。我认为这三方面兼而有之。我们喜欢说它蕴含大量艺术成分，但是我们都知道它里面更多的是科学。我认为，只要将科学、艺术和技能这三者拿捏得恰到好处，你就能取得一些引人瞩目的成绩。最优算法的知识当属科学，结构的想象则是艺术。这些算法的细节，以及编写高效代码实现这些结构的转换，是编程像手艺活的一面。</p>
<p>彼得·罗伊森：我当然认为这是艺术。我认为任何做得好的事情都可以成为艺术，因为任何工作都可以加上一定的品味或艺术天赋来完成。在我自己的工作中，我不但关心代码做什么，也关心它看起来如何。我经常重新整理代码，就为了让它看起来更漂亮。</p>
<p>加隆·兰尼尔：嗯，计算机本身没有什么特性。它们是空的，就像一张白纸。因为他们的思想完全是空的，所以他们的特性完全有人来决定，其程度超过任何其他人类活动的领域。…… 我更多地把编程看作是艺术。上周末我在一个电视节目上和彼得·德奇交谈，他说编程是一种手艺。然后，还有些人认为编程是数学。这完全取决于个人的不同看法。</p>
</blockquote>
<h2 id="从美学的角度看程序"><a href="#从美学的角度看程序" class="headerlink" title="从美学的角度看程序"></a>从美学的角度看程序</h2><p><strong>问：你认为什么样的代码清单或算法结构在审美上是优美或悦人的？</strong></p>
<p>这是一道非常主观的问题，不过受访者的回答都提到了同一个元素，那就是“结构的简单、清晰与一致”。</p>
<blockquote>
<p>查尔斯·西蒙尼：我觉得代码清单带给人的愉快同整洁的家差不多。你一眼就能分辨出家里是杂乱无章还是整洁如新。我敢打赌，我在3米开外就能看出程序拙劣与否。我也许没法保证它很不错，但如果从3米外看起来就很糟，我敢保证这程序写得不用心。如果写得不用心，那它在逻辑上也许就不会优美。</p>
<p>加里·基尔代尔：当一个程序干净整洁、结构良好、前后一致时，它就是美丽的。我不能拿程序和蒙娜丽莎来比，但程序的简单和优雅确实是美的。不同程序的风格差异是耐人寻味的，很像是艺术评论家眼中达.芬奇的蒙娜丽莎和凡高画作之间的差异。我特别喜欢 LISP 编程语言，它是如此赏心悦目。在 LIST 语言中有一个被称作 M 的简明表达式。用 M 表达式写的算法非常美，你几乎想把它装裱起来挂载墙上。</p>
</blockquote>
<h2 id="关于方法论"><a href="#关于方法论" class="headerlink" title="关于方法论"></a>关于方法论</h2><p><strong> 问：程序员需要具备什么样的素质才能写出成功的程序？</strong></p>
<blockquote>
<p>鲍勃·弗兰克斯顿：优秀的人一般需要满足两个因素：正好具备这个知识领域所需要的心智，并且在能力上又不是太愚钝。这样的组合很罕见，但并非不可思议。……一个优秀的程序员必须喜欢编程，对它感兴趣，这样他才会努力多学一点。优秀的程序员还要对美学有感觉，并且有相应的负罪感，能够敏锐地意识到什么时候违反了程序的美感。负罪感迫使他更加努力地去改进程序，使程序更加符合美感。</p>
<p>乔纳森·萨奇：天赋、气质、动机和努力工作的结合。我知道有很多人期望在很短的时间就成为一名好的程序员，但能成功做到这一点的人并不多。成功来自一遍又一遍地做同样的事情，每一次学习一点点，下一次都做得更好一点点。</p>
</blockquote>
<p><strong>问：你编程的过程是什么样的？</strong></p>
<blockquote>
<p>加里·基尔代尔：我遵循非常明确的、适合自己的流程。我会先画数据结构，然后花很长时间思考数据结构。在开始编程前，我会一直思考整个程序的流程。</p>
<p>比尔·盖茨：我喜欢在坐下来编写代码之前先把整个设计方案构想清楚。而在完成代码后，我喜欢回去把它从头到尾再全部重写一遍。</p>
<p>彼得·罗伊森：我是个非常“自底向上”的程序员。我不为整体战略伤脑筋，因为除非完成了所有的细节，否则我从来看不清全貌。</p>
</blockquote>
<p><strong>问：团队合作编程对项目有什么影响？</strong></p>
<p>受访者在这个问题上又达成了一致：开发团队应该尽可能精简。</p>
<blockquote>
<p>约翰·佩奇：如果一个产品需要四到五个人开发，那和你自己一个人编程时采取的方法是不同的。我坚信只能有一个人来做产品和高层结构的设计，最多不能超过两个人。所有的设计出于一个头脑，才能够实现和谐与一致。如果试图取悦所有人，让一个委员会来做设计，你的方向就错了。那绝对是致命的。</p>
<p>C·韦恩·莱特莱夫：不论是单枪匹马还是在一个非常小的团队里，我都能工作得很好。当团队超过6个人时，那就完全失控了。</p>
</blockquote>
<h2 id="关于其他兴趣"><a href="#关于其他兴趣" class="headerlink" title="关于其他兴趣"></a>关于其他兴趣</h2><p><strong>问：不编程的时候，你都做些什么？还有其他兴趣爱好吗？</strong></p>
<blockquote>
<p>查尔斯·西蒙尼：还有其他不少有意思的事情，我也乐此不疲。我对埃及象形文字略知一二。学习其他语言、旅行和观察世界都是很不错的活动。我还持有私人旋翼飞机飞行员执照。</p>
<p>加里·基尔代尔：我会间歇性的短期休假，因为我也很喜欢享受生活。这时我会外出，开飞机只是为了从工作中脱身出来。</p>
<p>约翰·佩奇：我是个飞行员。我正在盖一座房子，我弹吉他，喜欢游泳，不是为了游泳而游泳，而是为了锻炼身体。</p>
<p>杰夫·拉斯金：五花八门。我是个典型的发明家。我做过大量不同领域的项目。例如，我有一家公司制作无线电遥控模型飞机。另外我正在做一个钢琴方面的新设计。…… 我正在开发一款数控铣床。</p>
</blockquote>
<p>令人惊讶的是，多个受访者对驾驶飞机（或者遥控模型飞机）有着极大的兴趣。对此，约翰·佩奇表达了自己的看法：</p>
<blockquote>
<p>约翰·佩奇：一个原因是那些相当成功的程序员是有财力开飞机的。还有一个原因是，飞行对工程师来说是一个煅炼，因为它涉及操纵复杂的事物，这是工程师喜欢做的。程序员也喜欢驯服复杂的东西，而开飞机是非常复杂的，所以掌控飞机是很有趣的。最后，开飞机像编程。一名优秀的飞行员要给乘客提供完美、平稳的航行体验，而优秀的程序员给客户提供的是在计算机上完美、无需费脑的经历。</p>
</blockquote>
<h2 id="对未来的预想"><a href="#对未来的预想" class="headerlink" title="对未来的预想"></a>对未来的预想</h2><p><strong>问：你认为未来计算机在社会中会扮演什么角色？</strong></p>
<p>本书成书于上世纪80年代，这给了我们一个绝佳的机会通过今天的视角来审视书中人物对未来的设想与预言。</p>
<blockquote>
<p>丹·布兰克林：我觉得将来的个人计算机会跟台式机有所不同，现在的电脑就像是放在你办公桌上的电话。未来的个人电脑应该更像是个记事本。我的记事本随身携带，为什么它就不能是电脑呢？嗯，这不同于我们现在熟知的个人电脑。计算机技术会用在各种各样的全新场合，比如用作记事本。</p>
<p>鲍勃·弗兰克斯顿：我认为现在的这种计算机会消失。计算机会变成智能代理或家用电器。个人计算机最终将销声匿迹。当然这个过程是逐渐的。有一个阶段会有很多针对个人计算机使用者的应用，但这决不是进化的终点。虽然人们还无法准确预言计算机究竟会怎么发展，但谁会喜欢在桌子中间放这个一个大盒子呢？</p>
<p>彼得·罗伊森：对于整个行业或者整个世界，我都不那么关心。对于世界，我的关心程度只限于我希望世界是安宁的，我也希望尽我能尽的本分让世界安宁。</p>
</blockquote>
<hr>
<p>附录 - 受访者名单：</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Charles_Simonyi" target="_blank" rel="external">查尔斯·西蒙尼</a> - Microsoft Word 和 Microsoft Excel 等著名软件的领导开发者。值得一提的是，西蒙尼曾于2006年和2009年两度进行太空旅行。另外，著名的匈牙利命名法也与他有关。</li>
<li><a href="https://en.wikipedia.org/wiki/Butler_Lampson" target="_blank" rel="external">巴特勒·兰普森</a> - 曾担任 DEC 公司高级企业顾问工程师，1995年进入微软并一直工作至今。另外，兰普森自1987年开始一直担任麻省理工学院电气工程与计算机科学希兼职教授。</li>
<li><a href="https://en.wikipedia.org/wiki/John_Warnock" target="_blank" rel="external">约翰·沃诺克</a> - Adobe 公司的联合创始人，PostScript 语言的开发者。</li>
<li><a href="https://en.wikipedia.org/wiki/Gary_Kildall" target="_blank" rel="external">加里·基尔代尔</a> - CP/M 操作系统与 PL/1 编程语言的开发者。</li>
<li><a href="https://en.wikipedia.org/wiki/Bill_Gates" target="_blank" rel="external">比尔·盖茨</a> - 这位不用介绍了吧。</li>
<li><a href="https://en.wikipedia.org/wiki/Software_Publishing_Corporation" target="_blank" rel="external">约翰·佩奇</a> - 软件出版公司副总裁，主导开发了 PFS 系列产品。</li>
<li><a href="https://en.wikipedia.org/wiki/Wayne_Ratliff" target="_blank" rel="external">C·韦恩·莱特莱夫</a> - dBASE 系列产品的开发者，曾为 NASA 的“海盗”号火星探测器的着陆支持软件编写数据管理程序 MFILE。</li>
<li><a href="https://en.wikipedia.org/wiki/Dan_Bricklin" target="_blank" rel="external">丹·布兰克林</a> - VisiCalc 电子表格程序的合作开发者。</li>
<li><a href="https://en.wikipedia.org/wiki/Bob_Frankston" target="_blank" rel="external">鲍勃·弗兰克斯顿</a> - VisiCalc 电子表格程序的合作开发者。</li>
<li><a href="https://en.wikipedia.org/wiki/Jonathan_Sachs" target="_blank" rel="external">乔纳森·萨奇</a> - 取得非凡成功的 Lotus 1-2-3 电子报表软件的主要开发者。</li>
<li><a href="https://en.wikipedia.org/wiki/Ray_Ozzie" target="_blank" rel="external">雷·奥奇</a> - 曾在莲花公司与乔纳森.萨奇共事过，后加入微软。是 Symphony 程序的开发者。</li>
<li><a href="https://en.wikipedia.org/wiki/Peter_Roizen" target="_blank" rel="external">彼得·罗伊森</a> - T/Maker 公司的创始人以及 T/Maker 电子表格程序的开发者。</li>
<li><a href="https://en.wikipedia.org/wiki/Robert_Carr_(programmer" target="_blank" rel="external">鲍勃·卡尔</a>) - Framework 套件的开发者。</li>
<li><a href="https://en.wikipedia.org/wiki/Jef_Raskin" target="_blank" rel="external">杰夫·拉斯金</a> - 苹果电脑公司 Macintosh 项目的发起人。</li>
<li><a href="https://en.wikipedia.org/wiki/Andy_Hertzfeld" target="_blank" rel="external">安迪·赫兹菲尔德</a> - Macintosh 操作系统的主要开发人员。2015年上映的电影《史蒂夫·乔布斯》中有不少关于他的戏份。</li>
<li><a href="https://en.wikipedia.org/wiki/Toru_Iwatani" target="_blank" rel="external">岩谷徹</a> - 吃豆人游戏的缔造者。</li>
<li><a href="https://en.wikipedia.org/wiki/Scott_Kim" target="_blank" rel="external">斯科特·金</a> - Inversion 一书的作者以及 Inversions for the Macintosh 程序的开发者。</li>
<li><a href="https://en.wikipedia.org/wiki/Jaron_Lanier" target="_blank" rel="external">加隆·兰尼尔</a> - Moondust 游戏的开发者，亦是虚拟现实领域的拓荒者。</li>
<li><a href="https://en.wikipedia.org/wiki/Michael_Hawley" target="_blank" rel="external">迈克尔·霍利</a> - 层在卢卡斯影业旗下参与 SoundDroid（音响机器人）程序的开发工作。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;可以说，执行特定任务就像是从大杂烩中选定菜目，排出一席美味佳肴。你可以左手一份美味右手一盘佳肴，但搁在一起可能味同狗粮。懂得巧妙搭配食材才称得上好厨师。同样，把程序各个部分妥善组合在一起，才是成就优秀计算机程序员之道。&lt;/p&gt;
&lt;p&gt;– 《编程大师访谈录》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个周末，我花了两天时间读完了《编程大师访谈录》。书中收录了对19个传奇程序员的访谈内容，其中不乏大师们对编程的严肃思考和深刻洞见，读来趣味盎然。本文摘录了一组具有代表性的问答，从中可以对大师们对待编程的认识和想法管窥一斑。&lt;/p&gt;
&lt;p&gt;请注意，大师们的见解与论断未必全盘正确，不加思考地把他们的观点拿来奉为圭臬是危险的。本书的迷人之处在于，大师们的那些充满冒险性与创造性的想法可以给我们带来深刻的启发。循着这些启发做一番自己的思考，或可得到一二真知。&lt;/p&gt;
&lt;p&gt;另外，本书的成书时间是1986年。阅读时，需要把访谈置于当时的环境背景之下，方能透过时空和这些大师进行对话。&lt;/p&gt;
    
    </summary>
    
    
      <category term="reading" scheme="https://yuankun.me/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title>甩掉鼠标：Mac 键盘大师进化实录</title>
    <link href="https://yuankun.me/2016/02/15/get-rid-of-your-mouse/"/>
    <id>https://yuankun.me/2016/02/15/get-rid-of-your-mouse/</id>
    <published>2016-02-15T08:04:07.000Z</published>
    <updated>2017-08-13T10:02:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>对我这种懒到极致的人来说，鼠标有时候是一个拖慢效率的东西。想想看，我要打开一个应用、调整一个窗口的位置、移动一个文件、浏览一个网页，这些操作似乎都离不开鼠标。如果双手能够始终停留在键盘上，那该有多好。其实，仅用键盘就能完成的任务，比你想象中的要多得多。</p>
<p>经过一段时间的苦练，我终于可以把键盘耍得风生水起了。我把我们的美术总监拉到身边演示给他看，试图亮瞎他的眼睛。看过之后，他的表情是茫然的，眼神是鄙视的。虽然他什么也没说，但我知道他的内心独白是这样的：我不说话，我就静静地看着你装逼。</p>
<p>看来，美工狗和程序狗之间相互鄙视的现状，势必要持续存在下去了。</p>
<a id="more"></a>
<h2 id="应用启动器"><a href="#应用启动器" class="headerlink" title="应用启动器"></a>应用启动器</h2><p>我是一个好青年，<a href="https://www.alfredapp.com/" target="_blank" rel="external">Alfred</a> 是一款好软件。按照寻常的使用习惯，想要打开一个应用，首先你要在 Dock 栏或者在 LaunchPad 中找到对应的图标，然后用鼠标单击它。到了 Alfred 这里，你只需在呼出的文本框中输入应用的开头几个字母进行模糊搜索然后回车即可。</p>
<p><img src="https://www.alfredapp.com/media/pages/home/search@2x.jpg" alt="图片来源：https://www.alfredapp.com/"></p>
<p>当然，单纯把 Alfred 作为应用启动器未免有点大材小用了。除了快速打开应用，它能做的其实更多：浏览目录、执行系统命令、增强系统剪切板等等。再配合上自定义 Workflow 的功能，你能把它玩出花儿来。</p>
<p>类似的启动器还有 <a href="http://www.obdev.at/products/launchbar/index.html" target="_blank" rel="external">LaunchBar</a> 和 <a href="http://qsapp.com/" target="_blank" rel="external">QuickSilver</a>。它们所提供的功能大同小异，选择使用哪一款则是关乎个人喜好的事情了。</p>
<h2 id="窗口管理器"><a href="#窗口管理器" class="headerlink" title="窗口管理器"></a>窗口管理器</h2><p>OS X El Capitan 引入了一个叫做 Split View 的新特性，你可以把两个窗口分左右两栏平铺显示在屏幕上，不过触发操作十分复杂，复杂到令人发指。今天我们要推荐的这款窗口管理器叫做 <a href="https://www.spectacleapp.com/" target="_blank" rel="external">Spectacle</a>。</p>
<p>这个应用可以帮助你仅通过键盘快捷键就能够完成诸如设定窗口位置、切换窗口布局以及调整窗口尺寸等任务。特别是在多显示器与多任务环境下，它能显著提供你的工作效率。你会喜欢上它的。</p>
<p>Mac 下的窗口管理器可谓不少，推荐 Spectacle 的原因是它的功能已经够用，而且它是开源的。如果你不满足于 Spectacle 所提供的功能，可以尝一尝其他的美味：<a href="http://www.slant.co/topics/526/~window-manager-for-mac" target="_blank" rel="external">What is the best window manager for Mac?</a></p>
<h2 id="文件检索与操作"><a href="#文件检索与操作" class="headerlink" title="文件检索与操作"></a>文件检索与操作</h2><p>在文件检索方面，Apple 自家的 <a href="https://support.apple.com/kb/PH18828?locale=en_US" target="_blank" rel="external">Spotlight</a> 可以说未遇敌手。</p>
<p><img src="https://i.imgur.com/c3hfQou.png" alt="使用 Spotlight 检索文件"></p>
<p>它究竟有多强大，从下面所列的几个示例用法即可管窥一斑：</p>
<ul>
<li>直接通过关键字进行查询</li>
<li>仅使用文件名检索：<code>name:my_file</code></li>
<li>通过文件作者检索：<code>author:song4</code></li>
<li>通过日期检索：<ul>
<li>昨天创建的文件：<code>created:yesterday</code></li>
<li>创建日期早于2016年1月1日的文件：<code>created:&lt;01/01/2016</code></li>
<li>修改日期在2016年1月1日和2016年2月15日之间的文件： <code>modified:01/01/2016-15/02/2016</code></li>
</ul>
</li>
<li>通过文件类型检索：<code>kind:jpeg</code></li>
<li>通过标签检索：<code>label:work</code></li>
<li>更厉害的是，你还能对以上的条件通过 <code>AND/OR/NOT</code> 进行逻辑连接</li>
</ul>
<p>在文件操作方面，又该 Alfred 出场了。</p>
<p><img src="https://i.imgur.com/30fbi9g.png" alt="使用 Alfred 操作文件"></p>
<p>比如说你想拷贝或者移动文件、批量裁剪图片大小、添加多个文件到 Email 附件，把这些任务全部扔给 Alfred 就可以了。不用谢它，这是它分内的工作。</p>
<h2 id="Shortcat"><a href="#Shortcat" class="headerlink" title="Shortcat"></a>Shortcat</h2><p><a href="https://shortcatapp.com/" target="_blank" rel="external">Shortcat</a> 的目标是，凡是屏幕上所有可以点击的区域，都可以由键盘来完成点击操作。本文的题图就是这家伙的图标，它的图标是不是传达出了一丝造反的意味呢？</p>
<p><img src="https://files.shortcatapp.com/shortcat-screencast-network.gif" alt="图片来源：https://shortcatapp.com/"></p>
<p>有人不喜欢 Shortcat，觉得它把简单的事情搞复杂了。我只能说大家见仁见智吧。毕竟，我自己已经离不开它了。</p>
<h2 id="给浏览器装上一副翅膀"><a href="#给浏览器装上一副翅膀" class="headerlink" title="给浏览器装上一副翅膀"></a>给浏览器装上一副翅膀</h2><p>工作中，我使用 Google Chrome 作为主浏览器，使用 Vim 作为主编辑器。</p>
<p>有人做了一个浏览器增强工具，叫做 <a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb" target="_blank" rel="external">Vimium</a>（Vim + Chromium，Google Chrome 是基于 Chromium 项目构建的）。</p>
<p>发现它的那一刻，我流下了幸福的眼泪。</p>
<p>它能做什么呢？用一句话来说就是让你可以通过键盘来操纵浏览器。我自己常用的有下面几个功能：</p>
<ul>
<li>页面上下滚动</li>
<li>快速打开页面上任意一个链接地址</li>
<li>快速复制页面上任意一个链接地址</li>
<li>显示当前打开的所有标签页，并快速切换</li>
</ul>
<p>这些快捷功能，再加上 Google Chrome 自身提供的一系列快捷键，让我的双手大部分时间都不用离开键盘。</p>
<p>如果你用 Firefox 的话，类似的扩展叫做 <a href="https://addons.mozilla.org/en-US/firefox/addon/vimperator/" target="_blank" rel="external">Vimperator</a>；如果你用 Safari 的话，类似的扩展叫做 <a href="https://github.com/guyht/vimari" target="_blank" rel="external">Vimari</a>；如果你用 IE 的话，呃…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对我这种懒到极致的人来说，鼠标有时候是一个拖慢效率的东西。想想看，我要打开一个应用、调整一个窗口的位置、移动一个文件、浏览一个网页，这些操作似乎都离不开鼠标。如果双手能够始终停留在键盘上，那该有多好。其实，仅用键盘就能完成的任务，比你想象中的要多得多。&lt;/p&gt;
&lt;p&gt;经过一段时间的苦练，我终于可以把键盘耍得风生水起了。我把我们的美术总监拉到身边演示给他看，试图亮瞎他的眼睛。看过之后，他的表情是茫然的，眼神是鄙视的。虽然他什么也没说，但我知道他的内心独白是这样的：我不说话，我就静静地看着你装逼。&lt;/p&gt;
&lt;p&gt;看来，美工狗和程序狗之间相互鄙视的现状，势必要持续存在下去了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mac" scheme="https://yuankun.me/tags/mac/"/>
    
  </entry>
  
</feed>
