<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yuankun&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuankun.me/"/>
  <updated>2017-08-13T08:26:16.000Z</updated>
  <id>https://yuankun.me/</id>
  
  <author>
    <name>Yuankun Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>认识时序数据库</title>
    <link href="https://yuankun.me/2017/08/11/introduction-to-tsdb/"/>
    <id>https://yuankun.me/2017/08/11/introduction-to-tsdb/</id>
    <published>2017-08-11T08:54:54.000Z</published>
    <updated>2017-08-13T08:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>在很多场景下，数据并不是孤立的存在。例如股票价格的走势，一天之内温度的变化等。一组相关数据以时间为坐标串联起来，形成一条连续的变化线，这就是时序数据。时序数据可以直观地反映变化的规律性，也可以方便地用来识别和预测异常情形。</p>
<p>而时序数据库，就是专门用来存储时序数据的一类特殊数据库。</p>
<p>相比于传统的 RDBMS 或者 NoSQL，时序数据库有下列鲜明的特征。</p>
<a id="more"></a>
<p><strong>时序数据没有复杂的结构和关联</strong>。时序数据关注的是被测指标在时间维度上的变化规律，它并不需要复杂的嵌套的数据结构：时间戳连同数据值就构成了一个数据点。另外，时序数据也不关心不同的被测指标之间的关系（这种关系在定义良好的可视化图表上一目了然），数据之间不需要任何诸如外键等关联关系。</p>
<p><strong>正是因为没有复杂的结构和关联，时序数据库不需要提供范式和事务支持</strong>。时序数据库面向的是与传统数据库截然不同的业务领域，范式和事务在其中是不必要的。不过，时序数据库存在其他的限制和约束。</p>
<p><strong>时序数据库的实时写入量通常很大</strong>。时序数据需要采集的数据量与数据源的数量以及采样的时间精度成正比。在某些业务场景下，一秒钟需要采集上万甚至更多个数据点。</p>
<p><img src="https://i.imgur.com/xBEstlX.png" alt="北京市一天之内的温度走势，图片截取自 www.weather.com.cn"></p>
<p>上图是一组时序数据的示例：北京市一天之内的温度走势，图片截取自 www.weather.com.cn。</p>
<h2 id="时序数据的结构"><a href="#时序数据的结构" class="headerlink" title="时序数据的结构"></a>时序数据的结构</h2><p>时序数据有着简单的结构。</p>
<p>被测量的指标一般称作 <code>metric</code>。指标的一个孤立数据点表示为以指标名为索引的键值对：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">metric -&gt; (timestamp, value)</div></pre></td></tr></table></figure>
<p>依时间顺序逐次采集若干数据点，我们就得到了该被测量指标的一系列值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">metric -&gt; (t0, v0), (t1, v1), (t2, v2), ...</div></pre></td></tr></table></figure>
<p>这就是时序数据的基本结构，一般来说采样的时间间隔是恒定的（允许存在误差）。作为示例，下面是一组温度的时序数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">temperature -&gt; (1502433662000, 29.3), (1502433672002, 29.7), (1502433681999, 29.6), ...</div></pre></td></tr></table></figure>
<p>仅仅依靠指标名称来索引数据略嫌简陋，有时候希望能对数据作出进一步的区分。为了达到这一目的，我们给指标添加一个或者多个标签（labels）。例如，为了区分不同城市的温度，我们引入一个叫做 <code>city</code> 的标签。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">temperature&#123;city=beijing&#125; -&gt; ...</div><div class="line">temperature&#123;city=nanjing&#125; -&gt; ...</div><div class="line">temperature&#123;city=tianjin&#125; -&gt; ...</div></pre></td></tr></table></figure>
<p>指标的名称可以看作是一个叫作 <code>name</code> 的特殊标签，这样，数据的索引就一般化为了一组标签的集合。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;name=temperature, city=beijing&#125; -&gt; ...</div><div class="line">&#123;name=temperature, city=nanjing&#125; -&gt; ...</div><div class="line">&#123;name=temperature, city=tianjin&#125; -&gt; ...</div></pre></td></tr></table></figure>
<h2 id="时序数据库的读写特点"><a href="#时序数据库的读写特点" class="headerlink" title="时序数据库的读写特点"></a>时序数据库的读写特点</h2><p>写入操作的特点：</p>
<ul>
<li>由于数据量庞大，存储时需要引入某种压缩方案。Facebook 在<a href="http://www.vldb.org/pvldb/vol8/p1816-teller.pdf" target="_blank" rel="external">其阐述 Gorilla 数据库的论文</a>中介绍了一种非常适合时序数据库的压缩方案。</li>
<li>同样由于数据量庞大，存储时应当使用适当的留存策略（Retention Policy），定期删除数据。一般采用三级存储方案：最上层的内存用做缓存，存储热点数据；下一层的 SSD 用来存储留存期（一般为数周或数月）之内的数据；此外还有一个数据中心用来保留全部数据。</li>
<li>写入操作远多于读取操作，可能占到 99% 以上。绝大部分数据不会被用到。</li>
<li>数据总是追加式地写入（顺序写入）。</li>
<li>数据写入之后，就不会再被更新（无随机更新）。</li>
<li>超出留存期的数据被整块删除（无随机删除）。</li>
</ul>
<p>读取操作的特点：</p>
<ul>
<li>时序数据存在显著的时间敏感性，越是近期的数据越重要。大部分读取操作所请求的数据集中在最近一天或几天。</li>
<li>对时序数据的分析过程中需要进行大量运算（求和、计算变化率等），时序数据库需要高效地支持这些运算。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>你可以从以下两篇文章中找到更多关于时序数据库的讨论：</p>
<ul>
<li><a href="http://jmoiron.net/blog/thoughts-on-timeseries-databases/" target="_blank" rel="external">Thoughts on Time-series Databases</a></li>
<li><a href="https://www.xaprb.com/blog/2014/06/08/time-series-database-requirements/" target="_blank" rel="external">Time-Series Database Requirements</a></li>
</ul>
<p>另外，市面上已经有了很多时序数据库，下面两个列表提供了相关方面的内容：</p>
<ul>
<li><a href="https://db-engines.com/en/ranking/time+series+dbms" target="_blank" rel="external">DB-Engines Ranking of Time Series DBMS</a></li>
<li><a href="The complete list of all time series databases for your IoT project">The complete list of all time series databases for your IoT project</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在很多场景下，数据并不是孤立的存在。例如股票价格的走势，一天之内温度的变化等。一组相关数据以时间为坐标串联起来，形成一条连续的变化线，这就是时序数据。时序数据可以直观地反映变化的规律性，也可以方便地用来识别和预测异常情形。&lt;/p&gt;
&lt;p&gt;而时序数据库，就是专门用来存储时序数据的一类特殊数据库。&lt;/p&gt;
&lt;p&gt;相比于传统的 RDBMS 或者 NoSQL，时序数据库有下列鲜明的特征。&lt;/p&gt;
    
    </summary>
    
    
      <category term="tsdb" scheme="https://yuankun.me/tags/tsdb/"/>
    
  </entry>
  
  <entry>
    <title>使用 Let&#39;s Encrypt 为网站启用 HTTPS 支持</title>
    <link href="https://yuankun.me/2017/08/06/enable-https-with-lets-encrypt/"/>
    <id>https://yuankun.me/2017/08/06/enable-https-with-lets-encrypt/</id>
    <published>2017-08-06T08:58:13.000Z</published>
    <updated>2017-08-13T08:31:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP 协议传输的数据都是不加密的。想象一下，你访问某个网站，当数据经过路由器、宽带网关，以及某墙的时候都是完全可见的，是不是有种裸奔的感觉？为网站启用 HTTPS 支持可以说是大势所趋，在某国日益倒车的互联网环境下更是如此。</p>
<p>第零步是选择一个靠谱的 CA（Certificate Authority，数字证书认证中心）。你以为所有的认证中心都是中立可信的吗？并不是的，比如此前频频爆出丑闻的 WoSign 和 StarCom，这两家认证中心<a href="https://security.googleblog.com/2016/10/distrusting-wosign-and-startcom.html" target="_blank" rel="external">已经被 Google Chrome 等多款浏览器默认设置为不信任</a>。当然你更不能自己做裁判，像 12306.cn 一样给自己颁发证书。这里推荐 <a href="https://letsencrypt.org/" target="_blank" rel="external">Let’s Encrypt</a>，这家成立于 2016 年、由互联网安全研究小组（ISRG）主导的机构致力于向用户提供<strong>免费的、自动化管理</strong>的证书方案。</p>
<a id="more"></a>
<p>Let’s Encrypt 允许使用实现了 <a href="https://ietf-wg-acme.github.io/acme/" target="_blank" rel="external">ACME 协议</a>的客户端完成诸如证书获取、认证、签名、安装以及续签等步骤。官方推荐使用 <a href="https://certbot.eff.org/" target="_blank" rel="external">Certbot</a>。下面，我们以 Ubuntu 16.04 &amp; Nginx 为例，说明如何使用 Certbot 快速地为网站启用 HTTPS 支持。</p>
<h2 id="第一步：安装-Certbot"><a href="#第一步：安装-Certbot" class="headerlink" title="第一步：安装 Certbot"></a>第一步：安装 Certbot</h2><p>在系统中添加 Certbot 的 PPA，然后使用 <code>apt</code> 安装 Certbot。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo apt-get update</div><div class="line"><span class="meta">$</span> sudo apt-get install software-properties-common</div><div class="line"><span class="meta">$</span> sudo add-apt-repository ppa:certbot/certbot</div><div class="line"><span class="meta">$</span> sudo apt-get update</div><div class="line"><span class="meta">$</span> sudo apt-get install python-certbot-nginx</div></pre></td></tr></table></figure>
<h2 id="第二步：安装证书"><a href="#第二步：安装证书" class="headerlink" title="第二步：安装证书"></a>第二步：安装证书</h2><p>运行下面的命令获取证书，这个命令同时会为你更改 Nginx 配置文件（并且重载 Nginx）：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo certbot --nginx</div></pre></td></tr></table></figure>
<p>如果你想自己修改 Nginx 配置文件，可以使用 <code>certonly</code> 选项：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo certbot --nginx certonly</div></pre></td></tr></table></figure>
<h2 id="第三步：自动续签"><a href="#第三步：自动续签" class="headerlink" title="第三步：自动续签"></a>第三步：自动续签</h2><p>Let’s Encrypt 签发的证书，有效期是 90 天。你可以使用下面的命令对证书进行续签：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> sudo certbot renew --dry-run</div></pre></td></tr></table></figure>
<p>当然，创建一个 Cron Job 周期性地自动续签是一个更省事的方案。</p>
<hr>
<p>现在，在浏览器中打开你的网站，你就能从地址栏看到令人安心的绿色小锁了。除了本文介绍的方法，<a href="https://github.com/Neilpang/acme.sh" target="_blank" rel="external">acme.sh</a> 这个项目也提供了一种非常易用的方案。想要了解更多，请参考<a href="https://syntaxoff.com/post/201708/domain_ssl/" target="_blank" rel="external">这篇文章</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP 协议传输的数据都是不加密的。想象一下，你访问某个网站，当数据经过路由器、宽带网关，以及某墙的时候都是完全可见的，是不是有种裸奔的感觉？为网站启用 HTTPS 支持可以说是大势所趋，在某国日益倒车的互联网环境下更是如此。&lt;/p&gt;
&lt;p&gt;第零步是选择一个靠谱的 CA（Certificate Authority，数字证书认证中心）。你以为所有的认证中心都是中立可信的吗？并不是的，比如此前频频爆出丑闻的 WoSign 和 StarCom，这两家认证中心&lt;a href=&quot;https://security.googleblog.com/2016/10/distrusting-wosign-and-startcom.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;已经被 Google Chrome 等多款浏览器默认设置为不信任&lt;/a&gt;。当然你更不能自己做裁判，像 12306.cn 一样给自己颁发证书。这里推荐 &lt;a href=&quot;https://letsencrypt.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Let’s Encrypt&lt;/a&gt;，这家成立于 2016 年、由互联网安全研究小组（ISRG）主导的机构致力于向用户提供&lt;strong&gt;免费的、自动化管理&lt;/strong&gt;的证书方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ssl" scheme="https://yuankun.me/tags/ssl/"/>
    
      <category term="security" scheme="https://yuankun.me/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>为 Prometheus 添加 HTTP Basic Auth</title>
    <link href="https://yuankun.me/2017/07/30/add-http-basic-auth-to-prometheus/"/>
    <id>https://yuankun.me/2017/07/30/add-http-basic-auth-to-prometheus/</id>
    <published>2017-07-30T15:03:44.000Z</published>
    <updated>2017-08-13T08:42:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Prometheus 的 <a href="https://github.com/prometheus/node_exporter" target="_blank" rel="external">Node Exporter</a> 并没有提供任何认证支持。不过，借助 Nginx 作为反向代理服务器，我们可以很容易地为 Node Exporter 添加 HTTP Basic Auth 功能。</p>
<p>首先，启动 Node Exporter，监听 9090 端口。</p>
<p>然后，在 <code>/etc/nginx</code> （可能你的 Nginx 配置目录在其他路径，请做相应修改）目录下，使用 <code>apache2-utils</code> 提供的 <code>htpasswd</code> 工具创建一个用户文件，需要填入用户名和密码：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> htpasswd -c .htpasswd yuankun</div><div class="line">New password: </div><div class="line">Re-type new password: </div><div class="line">Adding password for user yuankun</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>接下来，在 Nginx 配置文件中添加下面的配置，这里我们使用 19090 作为代理端口：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="section">http</span> &#123;</div><div class="line">  <span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">0.0.0.0:19090</span>;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">      <span class="attribute">proxy_pass</span> http://localhost:9090/;</div><div class="line"></div><div class="line">      <span class="attribute">auth_basic</span> <span class="string">"Prometheus"</span>;</div><div class="line">      <span class="attribute">auth_basic_user_file</span> <span class="string">".htpasswd"</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>保存配置文件，然后重新载入 Nginx 服务。此时在浏览器中访问 server:19090，浏览器会要求你输入用户名和密码。</p>
<p>最后一步是修改 <code>prometheus.yml</code> 文件，将我们的 Node Exporter 服务添加进去：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- job_name:</span> <span class="string">'node-exporter'</span></div><div class="line"><span class="attr">  static_configs:</span></div><div class="line"><span class="attr">    - targets:</span> <span class="string">['your-ip:19090']</span></div><div class="line"><span class="attr">  basic_auth:</span></div><div class="line"><span class="attr">    username:</span> <span class="string">yuankun</span></div><div class="line"><span class="attr">    password:</span> <span class="string">your-password</span></div></pre></td></tr></table></figure>
<p>重启 Prometheus 服务，就大功告成了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Prometheus 的 &lt;a href=&quot;https://github.com/prometheus/node_exporter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node Exporter&lt;/a&gt; 并没有提供任何认证支持。不过，借助 Nginx 作为反向代理服务器，我们可以很容易地为 Node Exporter 添加 HTTP Basic Auth 功能。&lt;/p&gt;
&lt;p&gt;首先，启动 Node Exporter，监听 9090 端口。&lt;/p&gt;
&lt;p&gt;然后，在 &lt;code&gt;/etc/nginx&lt;/code&gt; （可能你的 Nginx 配置目录在其他路径，请做相应修改）目录下，使用 &lt;code&gt;apache2-utils&lt;/code&gt; 提供的 &lt;code&gt;htpasswd&lt;/code&gt; 工具创建一个用户文件，需要填入用户名和密码：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; htpasswd -c .htpasswd yuankun&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;New password: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Re-type new password: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Adding password for user yuankun&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="prometheus" scheme="https://yuankun.me/tags/prometheus/"/>
    
  </entry>
  
</feed>
